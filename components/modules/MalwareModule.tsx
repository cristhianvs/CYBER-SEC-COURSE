"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Shield, 
  Bug, 
  Lock,
  Award,
  Loader,
  HardDrive,
  RefreshCw,
  AlertTriangle
} from 'lucide-react';
import { useCourse } from '@/lib/context/CourseContext';
import { ModuleNavigation } from './ModuleNavigation';

// Tipos comunes
interface StepProps {
  title: string;
  content: React.ReactNode;
}

interface InfoCardProps {
  icon?: React.ReactNode;
  title: string;
  content: string;
}

// Componentes de utilidad
const Step: React.FC<StepProps> = ({ title, content }) => (
  <div className="space-y-6">
    <h2 className="text-2xl font-bold mb-4">{title}</h2>
    {content}
  </div>
);

const InfoCard: React.FC<InfoCardProps> = ({ icon, title, content }) => (
  <div className="bg-white p-4 rounded-lg shadow">
    {icon}
    <h4 className="font-bold">{title}</h4>
    <p className="text-sm">{content}</p>
  </div>
);

// Paso 1: Introducción
const IntroductionStep: React.FC = () => (
  <div className="space-y-6">
    <div className="bg-blue-100 p-6 rounded-lg">
      <h3 className="text-xl font-bold mb-4">Resistencia Contra el Malware</h3>
      <p className="text-gray-700">
        Un virus desconocido intenta infiltrarse en los sistemas de la empresa. Como 
        Guardián de la Seguridad, deberás desplegar defensas para evitar que el malware 
        infecte los equipos y detenga las operaciones.
      </p>
    </div>
    <div className="grid grid-cols-2 gap-4">
      <div className="space-y-4">
        <h4 className="font-bold">Tipos de Malware</h4>
        <ul className="list-disc pl-5 space-y-2">
          <li>Gusanos: Se propagan automáticamente por la red</li>
          <li>Troyanos: Se disfrazan como software legítimo</li>
          <li>Spyware: Espía actividades y roba datos</li>
          <li>Ransomware: Secuestra archivos y pide rescate</li>
        </ul>
      </div>
      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="font-bold mb-2">Impacto del Malware</h4>
        <ul className="list-disc pl-5 space-y-2">
          <li>Robo de información sensible</li>
          <li>Pérdida de datos importantes</li>
          <li>Interrupción de operaciones</li>
          <li>Daños financieros</li>
        </ul>
      </div>
    </div>
  </div>
);

// Paso 2: Identificación de Malware
interface MalwareScenario {
  id: number;
  description: string;
  isMalicious: boolean;
  explanation: string;
  indicators: string[];
}

const IdentificationStep: React.FC<{ onScore: (points: number, actionKey: string) => void }> = ({ onScore }) => {
  const [currentScenario, setCurrentScenario] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [showFeedback, setShowFeedback] = useState(false);
  const [pointsAwarded, setPointsAwarded] = useState<{ [key: string]: boolean }>({});

  const scenarios: MalwareScenario[] = [
    {
      id: 1,
      description: "Has recibido un correo con un archivo adjunto 'Factura_urgente.exe'",
      isMalicious: true,
      explanation: "Los archivos .exe son ejecutables y pueden contener malware. Las facturas legítimas suelen venir en formato PDF.",
      indicators: ["Extensión ejecutable", "Urgencia sospechosa"]
    },
    {
      id: 2,
      description: "Una ventana emergente indica que tu antivirus necesita actualización",
      isMalicious: true,
      explanation: "Las actualizaciones legítimas del antivirus se realizan dentro del programa, no mediante pop-ups.",
      indicators: ["Ventana emergente sospechosa", "Solicitud no solicitada"]
    }
  ];

  const handleDecision = (isMalicious: boolean) => {
    const scenario = scenarios[currentScenario];
    const isCorrect = isMalicious === scenario.isMalicious;
    const actionKey = `scenario_${scenario.id}`;

    if (isCorrect && !pointsAwarded[actionKey]) {
      onScore(15, actionKey);
      setPointsAwarded({ ...pointsAwarded, [actionKey]: true });
    }

    setFeedback(
      isCorrect 
        ? `¡Correcto! ${scenario.explanation}`
        : `Incorrecto. ${scenario.explanation}`
    );
    setShowFeedback(true);

    setTimeout(() => {
      if (currentScenario < scenarios.length - 1) {
        setCurrentScenario(currentScenario + 1);
        setShowFeedback(false);
      }
    }, 2000);
  };

  return (
    <div className="space-y-4">
      <div className="bg-white p-6 rounded-lg shadow">
        <p className="text-lg mb-4">{scenarios[currentScenario].description}</p>
        <div className="flex space-x-4">
          <Button
            variant="outline"
            className="flex-1"
            onClick={() => handleDecision(false)}
          >
            Seguro
          </Button>
          <Button
            variant="outline"
            className="flex-1"
            onClick={() => handleDecision(true)}
          >
            Malicioso
          </Button>
        </div>
      </div>
      {showFeedback && (
        <div className="p-4 bg-blue-100 rounded-lg">
          {feedback}
        </div>
      )}
    </div>
  );
};

// Paso 3: Simulación de Defensa
interface DefenseAction {
  id: string;
  name: string;
  icon: React.ReactNode;
  description: string;
}

const DefenseStep: React.FC<{ onScore: (points: number, actionKey: string) => void }> = ({ onScore }) => {
    const [selectedDefenses, setSelectedDefenses] = useState<string[]>([]);
    const [feedback, setFeedback] = useState('');
    const [pointsAwarded, setPointsAwarded] = useState<{ [key: string]: boolean }>({});

    const defenseActions: DefenseAction[] = [
        {
        id: 'antivirus',
        name: 'Instalar Antivirus',
        icon: <Shield className="h-6 w-6 text-blue-500"/>, // Removido el color aquí
        description: 'Protege contra amenazas conocidas'
        },
        {
        id: 'updates',
        name: 'Actualizar Software',
        icon: <RefreshCw className="h-6 w-6 text-green-500" />, // Removido el color aquí
        description: 'Mantiene el sistema protegido'
        },
        {
        id: 'backup',
        name: 'Realizar Backup',
        icon: <HardDrive className="h-6 w-6 text-purple-500" />, // Removido el color aquí
        description: 'Asegura los datos importantes'
        }
    ];

    const handleDefenseSelection = (defenseId: string) => {
        if (!selectedDefenses.includes(defenseId)) {
        setSelectedDefenses([...selectedDefenses, defenseId]);
        
        if (!pointsAwarded[defenseId]) {
            onScore(10, defenseId);
            setPointsAwarded({ ...pointsAwarded, [defenseId]: true });
        }

        setFeedback('¡Excelente elección! Esta medida ayuda a proteger los sistemas.');
        }
    };

    return (
        <div className="space-y-4">
        <p className="text-gray-700 mb-4">
            Selecciona las medidas de defensa para proteger los sistemas:
        </p>
        <div className="grid grid-cols-3 gap-4">
            {defenseActions.map((action) => (
            <Button
                key={action.id}
                variant={selectedDefenses.includes(action.id) ? "default" : "outline"}
                className="h-24 w-full flex flex-col items-center justify-center gap-2 p-4"
                onClick={() => handleDefenseSelection(action.id)}
            >
                <div className={`${
                selectedDefenses.includes(action.id) ? 'text-white' : 'text-blue-500'
                }`}>
                {action.icon}
                </div>
                <span className="text-center">{action.name}</span>
            </Button>
            ))}
        </div>
        {feedback && (
            <div className="p-4 bg-green-100 rounded-lg mt-4">
            {feedback}
            </div>
        )}
        </div>
    );
};

// Paso 4: Consejos de Seguridad
const SecurityTipsStep: React.FC = () => {
  const tips = [
    {
      icon: <AlertTriangle className="w-6 h-6 text-yellow-500" />,
      title: "Descargas Seguras",
      content: "Solo descarga de sitios oficiales y verifica la fuente"
    },
    {
      icon: <Bug className="w-6 h-6 text-red-500" />,
      title: "USB Desconocidos",
      content: "Nunca conectes dispositivos USB de origen desconocido"
    },
    {
      icon: <Lock className="w-6 h-6 text-blue-500" />,
      title: "Software Original",
      content: "Utiliza solo software original y manténlo actualizado"
    }
  ];

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-3 gap-4">
        {tips.map((tip, index) => (
          <InfoCard
            key={index}
            icon={tip.icon}
            title={tip.title}
            content={tip.content}
          />
        ))}
      </div>
    </div>
  );
};

// Paso 5: Evaluación Final
const FinalQuizStep: React.FC<{ onScore: (points: number, actionKey: string) => void }> = ({ onScore }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [feedback, setFeedback] = useState('');
  const [pointsAwarded, setPointsAwarded] = useState<{ [key: string]: boolean }>({});
  const [selectedOption, setSelectedOption] = useState<number | null>(null);

  const questions = [
    {
      id: 1,
      question: "¿Cuál es la mejor acción ante un archivo sospechoso?",
      options: [
        "Abrirlo en modo seguro",
        "Escanearlo con antivirus",
        "Compartirlo con IT",
        "Ejecutarlo en una VM"
      ],
      correct: 1
    },
    {
      id: 2,
      question: "¿Qué hacer si detectas una infección de malware?",
      options: [
        "Reiniciar el equipo",
        "Desconectar de la red y notificar a IT",
        "Borrar archivos sospechosos",
        "Instalar más antivirus"
      ],
      correct: 1
    }
  ];

  const handleAnswer = (option: number) => {
    setSelectedOption(option);
    const question = questions[currentQuestion];
    const isCorrect = option === question.correct;
    const actionKey = `quiz_${question.id}`;

    if (isCorrect && !pointsAwarded[actionKey]) {
      onScore(20, actionKey);
      setPointsAwarded({ ...pointsAwarded, [actionKey]: true });
    }

    setFeedback(
      isCorrect 
        ? "¡Correcto! Excelente elección." 
        : "Incorrecto. Revisa el material nuevamente."
    );
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setFeedback('');
      setSelectedOption(null);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setFeedback('');
      setSelectedOption(null);
    }
  };

  return (
    <div className="space-y-4">
      <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="font-bold mb-4">{questions[currentQuestion].question}</h3>
        <div className="space-y-2">
          {questions[currentQuestion].options.map((option, index) => (
            <Button
              key={index}
              variant={selectedOption === index ? "default" : "outline"}
              className="w-full text-left justify-start"
              onClick={() => handleAnswer(index)}
              disabled={selectedOption !== null}
            >
              {option}
            </Button>
          ))}
        </div>
      </div>
      {feedback && (
        <div className={`p-4 rounded-lg ${
          feedback.includes("Correcto") ? "bg-green-100" : "bg-red-100"
        }`}>
          {feedback}
        </div>
      )}
      <div className="flex justify-between mt-4">
        <Button
          variant="outline"
          onClick={handlePrevious}
          disabled={currentQuestion === 0}
        >
          Pregunta Anterior
        </Button>
        {currentQuestion < questions.length - 1 && (
          <Button
            onClick={handleNext}
            disabled={selectedOption === null}
          >
            Siguiente Pregunta
          </Button>
        )}
      </div>
      <div className="text-sm text-gray-500 text-center">
        Pregunta {currentQuestion + 1} de {questions.length}
      </div>
    </div>
  );
};

// Componente principal del módulo
const MalwareModule: React.FC = () => {
  const { updateProgress, score, setScore } = useCourse();
  const [currentStep, setCurrentStep] = useState<number>(0);
  const [isModuleCompleted, setIsModuleCompleted] = useState<boolean>(false);
  const [pointsAwarded, setPointsAwarded] = useState<{ [key: string]: boolean }>({});
  // Agregar aquí el nuevo estado
  const [currentStepAnswered, setCurrentStepAnswered] = useState<boolean>(false);


  const handleScore = (points: number, actionKey: string) => {
    if (!pointsAwarded[actionKey]) {
      setScore(score + points);
      setPointsAwarded({ ...pointsAwarded, [actionKey]: true });
      setCurrentStepAnswered(true);
    }
  };

  const steps = [
    {
      title: "Introducción",
      content: <IntroductionStep />
    },
    {
      title: "Identifica al Intruso",
      content: <IdentificationStep onScore={handleScore} />
    },
    {
      title: "Defiende la Red",
      content: <DefenseStep onScore={handleScore} />
    },
    {
      title: "Consejos de Seguridad",
      content: <SecurityTipsStep />
    },
    {
      title: "Evaluación Final",
      content: <FinalQuizStep onScore={handleScore} />
    }
  ];

  useEffect(() => {
    setCurrentStepAnswered(currentStep === 0 || currentStep === 3); // La introducción y los consejos siempre están "respondidos"
  }, [currentStep]);

  useEffect(() => {
    const isCompleted =
      currentStep === steps.length - 1 &&
      Object.keys(pointsAwarded).length >= 5;

    setIsModuleCompleted(isCompleted);

    if (isCompleted) {
      updateProgress(3, { completed: true, score: score });
    }
  }, [currentStep, pointsAwarded, score, updateProgress]);

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle>Módulo 3: Resistencia Contra el Malware</CardTitle>
          <div className="flex items-center space-x-2">
            <Award className="w-6 h-6 text-yellow-500" />
            <span className="font-bold">{score} puntos</span>
          </div>
        </div>
        <div className="flex justify-between items-center mt-4">
          {steps.map((_, index) => (
            <div
              key={index}
              className={`flex-1 h-2 ${
                index === currentStep
                  ? 'bg-blue-500'
                  : index < currentStep
                  ? 'bg-green-500'
                  : 'bg-gray-200'
              } ${index > 0 ? 'ml-1' : ''}`}
            />
          ))}
        </div>
      </CardHeader>
      <CardContent>
        <Step title={steps[currentStep].title} content={steps[currentStep].content} />
        <ModuleNavigation
          currentModule={3}
          totalModules={3}
          onNext={() => {
            if (currentStep < steps.length - 1 && currentStepAnswered) {
              setCurrentStep(currentStep + 1);
            }
          }}
          onPrevious={() => {
            setCurrentStep(Math.max(0, currentStep - 1));
          }}
          isCompleted={isModuleCompleted}
          currentStepAnswered={currentStepAnswered}
        />
      </CardContent>
    </Card>
  );
};

export default MalwareModule;